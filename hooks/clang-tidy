#!/usr/bin/env bash
# Wrapper script for clang-tidy
################################################################################
CMD="clang-tidy"
args=("$@")
get_script_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" > /dev/null && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     DIR="$( cd -P "$( dirname "$SOURCE" )" > /dev/null && pwd )"
     echo "$DIR"
}
hook_dir="$(get_script_dir)"
. "$hook_dir/utils"


# Get version. Should be the same as clang-format.
function get_clangtidy_ver { clang-tidy --version | grep version | awk '{print $3}'; }


# Split text into an array of args that can be passed into clang-tidy
# clang-tidy can complain about # of warnings in systems files
# in the first line, depending on options. If it does this, discard that line.
function execute_cmd {
	output="$(clang-tidy "${args[@]}" 2>&1)"
	if printf "%s" "$output" | head -n1 | grep -q " warnings "; then
		output="$(printf "%s" "$output" | tail -n +2)"
	fi
}


# If there is any stdout from clang-tidy, that means there are errors
function parse_output {
	if [ -z "${output}" ]; then
		exit 0
	else
		echo -e "${output}"
		exit 1
	fi
}


function clangtidy_main {
	check_installed "$CMD"
	parse_ddash_args "${args[*]}" "$(get_clangtidy_ver)"
	execute_cmd
	parse_output
}

clangtidy_main
